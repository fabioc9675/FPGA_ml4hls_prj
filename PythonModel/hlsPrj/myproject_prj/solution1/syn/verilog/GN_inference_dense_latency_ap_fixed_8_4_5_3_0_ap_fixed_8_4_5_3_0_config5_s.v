// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GN_inference_dense_latency_ap_fixed_8_4_5_3_0_ap_fixed_8_4_5_3_0_config5_s (
        ap_clk,
        ap_rst,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [7:0] p_read;
input  [7:0] p_read1;
input  [7:0] p_read2;
input  [7:0] p_read3;
input  [7:0] p_read4;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
input   ap_ce;

reg[7:0] ap_return_0;
reg[7:0] ap_return_1;
reg[7:0] ap_return_2;
reg[7:0] ap_return_3;

reg  signed [7:0] p_read16_reg_520;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] p_read_8_reg_527;
reg   [7:0] trunc_ln818_4_reg_532;
reg   [7:0] trunc_ln818_7_reg_537;
wire   [7:0] add_ln813_7_fu_411_p2;
reg   [7:0] add_ln813_7_reg_542;
wire   [7:0] add_ln813_10_fu_429_p2;
reg   [7:0] add_ln813_10_reg_547;
wire   [7:0] add_ln813_13_fu_441_p2;
reg   [7:0] add_ln813_13_reg_552;
wire  signed [4:0] mul_ln1270_fu_97_p1;
wire    ap_block_pp0_stage0;
wire   [10:0] shl_ln_fu_156_p3;
wire   [10:0] r_V_fu_164_p2;
wire   [8:0] shl_ln1273_5_fu_180_p3;
wire  signed [10:0] sext_ln1273_fu_188_p1;
wire   [10:0] r_V_3_fu_192_p2;
wire  signed [7:0] shl_ln1273_7_fu_213_p1;
wire   [10:0] shl_ln1273_7_fu_213_p3;
wire  signed [7:0] shl_ln1273_8_fu_227_p1;
wire   [8:0] shl_ln1273_8_fu_227_p3;
wire   [10:0] sub_ln1273_fu_221_p2;
wire  signed [10:0] sext_ln1273_3_fu_235_p1;
wire   [10:0] r_V_5_fu_239_p2;
wire   [10:0] mul_ln1270_fu_97_p2;
wire  signed [7:0] sext_ln1273_4_fu_265_p0;
wire  signed [7:0] trunc_ln1273_fu_269_p0;
wire   [6:0] trunc_ln1273_fu_269_p1;
wire  signed [7:0] shl_ln1273_s_fu_281_p1;
wire   [9:0] shl_ln1273_s_fu_281_p3;
wire  signed [10:0] sext_ln1273_5_fu_289_p1;
wire   [10:0] shl_ln1273_9_fu_273_p3;
wire   [10:0] r_V_6_fu_293_p2;
wire  signed [7:0] shl_ln1273_1_fu_309_p1;
wire  signed [7:0] shl_ln1273_2_fu_317_p1;
wire   [8:0] shl_ln1273_2_fu_317_p3;
wire   [10:0] shl_ln1273_1_fu_309_p3;
wire  signed [10:0] sext_ln1273_6_fu_325_p1;
wire   [10:0] r_V_7_fu_329_p2;
wire  signed [10:0] sext_ln1273_4_fu_265_p1;
wire   [10:0] r_V_8_fu_345_p2;
wire  signed [7:0] sext_ln1273_7_fu_361_p0;
wire  signed [7:0] shl_ln1273_3_fu_365_p1;
wire   [10:0] shl_ln1273_3_fu_365_p3;
wire   [10:0] r_V_9_fu_373_p2;
wire  signed [10:0] sext_ln1273_7_fu_361_p1;
wire   [10:0] r_V_10_fu_389_p2;
wire   [7:0] trunc_ln818_9_fu_335_p4;
wire   [7:0] add_ln813_6_fu_405_p2;
wire   [7:0] trunc_ln818_6_fu_245_p4;
wire   [7:0] trunc_ln_fu_170_p4;
wire   [7:0] trunc_ln818_8_fu_299_p4;
wire   [7:0] trunc_ln818_1_fu_379_p4;
wire   [7:0] add_ln813_9_fu_423_p2;
wire   [7:0] add_ln813_8_fu_417_p2;
wire   [7:0] trunc_ln818_2_fu_395_p4;
wire   [7:0] add_ln813_12_fu_435_p2;
wire   [7:0] trunc_ln818_s_fu_351_p4;
wire   [10:0] shl_ln1273_6_fu_450_p3;
wire  signed [10:0] sext_ln1273_2_fu_447_p1;
wire   [10:0] r_V_4_fu_457_p2;
wire   [7:0] trunc_ln818_5_fu_463_p4;
wire   [7:0] add_ln813_4_fu_478_p2;
wire   [7:0] add_ln813_fu_473_p2;
wire   [7:0] add_ln813_11_fu_489_p2;
wire   [7:0] add_ln813_14_fu_493_p2;
wire   [7:0] add_ln813_5_fu_483_p2;
reg    ap_ce_reg;
reg   [7:0] ap_return_0_int_reg;
reg   [7:0] ap_return_1_int_reg;
reg   [7:0] ap_return_2_int_reg;
reg   [7:0] ap_return_3_int_reg;

GN_inference_mul_8s_5s_11_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 11 ))
mul_8s_5s_11_1_0_U2(
    .din0(p_read2),
    .din1(mul_ln1270_fu_97_p1),
    .dout(mul_ln1270_fu_97_p2)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln813_10_reg_547 <= add_ln813_10_fu_429_p2;
        add_ln813_13_reg_552 <= add_ln813_13_fu_441_p2;
        add_ln813_7_reg_542 <= add_ln813_7_fu_411_p2;
        p_read16_reg_520 <= p_read1;
        p_read_8_reg_527 <= p_read;
        trunc_ln818_4_reg_532 <= {{r_V_3_fu_192_p2[10:3]}};
        trunc_ln818_7_reg_537 <= {{mul_ln1270_fu_97_p2[10:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_0_int_reg <= add_ln813_10_reg_547;
        ap_return_1_int_reg <= add_ln813_7_reg_542;
        ap_return_2_int_reg <= add_ln813_14_fu_493_p2;
        ap_return_3_int_reg <= add_ln813_5_fu_483_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_0 = ap_return_0_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_0 = add_ln813_10_reg_547;
    end else begin
        ap_return_0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_1 = ap_return_1_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_1 = add_ln813_7_reg_542;
    end else begin
        ap_return_1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_2 = ap_return_2_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_2 = add_ln813_14_fu_493_p2;
    end else begin
        ap_return_2 = 'bx;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_3 = ap_return_3_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_3 = add_ln813_5_fu_483_p2;
    end else begin
        ap_return_3 = 'bx;
    end
end

assign add_ln813_10_fu_429_p2 = (add_ln813_9_fu_423_p2 + add_ln813_8_fu_417_p2);

assign add_ln813_11_fu_489_p2 = ($signed(p_read_8_reg_527) + $signed(p_read16_reg_520));

assign add_ln813_12_fu_435_p2 = ($signed(trunc_ln818_2_fu_395_p4) + $signed(8'd246));

assign add_ln813_13_fu_441_p2 = (add_ln813_12_fu_435_p2 + trunc_ln818_s_fu_351_p4);

assign add_ln813_14_fu_493_p2 = (add_ln813_13_reg_552 + add_ln813_11_fu_489_p2);

assign add_ln813_4_fu_478_p2 = ($signed(trunc_ln818_7_reg_537) + $signed(8'd246));

assign add_ln813_5_fu_483_p2 = (add_ln813_4_fu_478_p2 + add_ln813_fu_473_p2);

assign add_ln813_6_fu_405_p2 = ($signed(trunc_ln818_9_fu_335_p4) + $signed(8'd246));

assign add_ln813_7_fu_411_p2 = (add_ln813_6_fu_405_p2 + trunc_ln818_6_fu_245_p4);

assign add_ln813_8_fu_417_p2 = (trunc_ln_fu_170_p4 + trunc_ln818_8_fu_299_p4);

assign add_ln813_9_fu_423_p2 = (trunc_ln818_1_fu_379_p4 + 8'd10);

assign add_ln813_fu_473_p2 = (trunc_ln818_4_reg_532 + trunc_ln818_5_fu_463_p4);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign mul_ln1270_fu_97_p1 = 11'd2035;

assign r_V_10_fu_389_p2 = ($signed(shl_ln1273_3_fu_365_p3) + $signed(sext_ln1273_7_fu_361_p1));

assign r_V_3_fu_192_p2 = ($signed(shl_ln_fu_156_p3) + $signed(sext_ln1273_fu_188_p1));

assign r_V_4_fu_457_p2 = ($signed(shl_ln1273_6_fu_450_p3) + $signed(sext_ln1273_2_fu_447_p1));

assign r_V_5_fu_239_p2 = ($signed(sub_ln1273_fu_221_p2) - $signed(sext_ln1273_3_fu_235_p1));

assign r_V_6_fu_293_p2 = ($signed(sext_ln1273_5_fu_289_p1) - $signed(shl_ln1273_9_fu_273_p3));

assign r_V_7_fu_329_p2 = ($signed(shl_ln1273_1_fu_309_p3) + $signed(sext_ln1273_6_fu_325_p1));

assign r_V_8_fu_345_p2 = ($signed(shl_ln1273_1_fu_309_p3) + $signed(sext_ln1273_4_fu_265_p1));

assign r_V_9_fu_373_p2 = (11'd0 - shl_ln1273_3_fu_365_p3);

assign r_V_fu_164_p2 = (11'd0 - shl_ln_fu_156_p3);

assign sext_ln1273_2_fu_447_p1 = p_read16_reg_520;

assign sext_ln1273_3_fu_235_p1 = $signed(shl_ln1273_8_fu_227_p3);

assign sext_ln1273_4_fu_265_p0 = p_read3;

assign sext_ln1273_4_fu_265_p1 = sext_ln1273_4_fu_265_p0;

assign sext_ln1273_5_fu_289_p1 = $signed(shl_ln1273_s_fu_281_p3);

assign sext_ln1273_6_fu_325_p1 = $signed(shl_ln1273_2_fu_317_p3);

assign sext_ln1273_7_fu_361_p0 = p_read4;

assign sext_ln1273_7_fu_361_p1 = sext_ln1273_7_fu_361_p0;

assign sext_ln1273_fu_188_p1 = $signed(shl_ln1273_5_fu_180_p3);

assign shl_ln1273_1_fu_309_p1 = p_read3;

assign shl_ln1273_1_fu_309_p3 = {{shl_ln1273_1_fu_309_p1}, {3'd0}};

assign shl_ln1273_2_fu_317_p1 = p_read3;

assign shl_ln1273_2_fu_317_p3 = {{shl_ln1273_2_fu_317_p1}, {1'd0}};

assign shl_ln1273_3_fu_365_p1 = p_read4;

assign shl_ln1273_3_fu_365_p3 = {{shl_ln1273_3_fu_365_p1}, {3'd0}};

assign shl_ln1273_5_fu_180_p3 = {{p_read}, {1'd0}};

assign shl_ln1273_6_fu_450_p3 = {{p_read16_reg_520}, {3'd0}};

assign shl_ln1273_7_fu_213_p1 = p_read2;

assign shl_ln1273_7_fu_213_p3 = {{shl_ln1273_7_fu_213_p1}, {3'd0}};

assign shl_ln1273_8_fu_227_p1 = p_read2;

assign shl_ln1273_8_fu_227_p3 = {{shl_ln1273_8_fu_227_p1}, {1'd0}};

assign shl_ln1273_9_fu_273_p3 = {{trunc_ln1273_fu_269_p1}, {4'd0}};

assign shl_ln1273_s_fu_281_p1 = p_read3;

assign shl_ln1273_s_fu_281_p3 = {{shl_ln1273_s_fu_281_p1}, {2'd0}};

assign shl_ln_fu_156_p3 = {{p_read}, {3'd0}};

assign sub_ln1273_fu_221_p2 = (11'd0 - shl_ln1273_7_fu_213_p3);

assign trunc_ln1273_fu_269_p0 = p_read3;

assign trunc_ln1273_fu_269_p1 = trunc_ln1273_fu_269_p0[6:0];

assign trunc_ln818_1_fu_379_p4 = {{r_V_9_fu_373_p2[10:3]}};

assign trunc_ln818_2_fu_395_p4 = {{r_V_10_fu_389_p2[10:3]}};

assign trunc_ln818_5_fu_463_p4 = {{r_V_4_fu_457_p2[10:3]}};

assign trunc_ln818_6_fu_245_p4 = {{r_V_5_fu_239_p2[10:3]}};

assign trunc_ln818_8_fu_299_p4 = {{r_V_6_fu_293_p2[10:3]}};

assign trunc_ln818_9_fu_335_p4 = {{r_V_7_fu_329_p2[10:3]}};

assign trunc_ln818_s_fu_351_p4 = {{r_V_8_fu_345_p2[10:3]}};

assign trunc_ln_fu_170_p4 = {{r_V_fu_164_p2[10:3]}};

endmodule //GN_inference_dense_latency_ap_fixed_8_4_5_3_0_ap_fixed_8_4_5_3_0_config5_s
