-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_latency_ap_fixed_8_4_5_3_0_ap_fixed_8_4_5_3_0_config17_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of myproject_dense_latency_ap_fixed_8_4_5_3_0_ap_fixed_8_4_5_3_0_config17_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv17_27F : STD_LOGIC_VECTOR (16 downto 0) := "00000001001111111";
    constant ap_const_lv17_26F : STD_LOGIC_VECTOR (16 downto 0) := "00000001001101111";
    constant ap_const_lv17_1FD47 : STD_LOGIC_VECTOR (16 downto 0) := "11111110101000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

attribute shreg_extract : string;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln_reg_198 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln818_s_reg_203 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln818_4_reg_208 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_56_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_57_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_58_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_57_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_56_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_58_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln813_15_fu_166_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln813_fu_162_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_56_ce : STD_LOGIC;
    signal grp_fu_57_ce : STD_LOGIC;
    signal grp_fu_58_ce : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;
    signal p_read_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read1_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read2_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_0_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_1_int_reg : STD_LOGIC_VECTOR (7 downto 0);

    component myproject_mul_8s_11ns_17_2_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component myproject_mul_8s_11s_17_2_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;



begin
    mul_8s_11ns_17_2_0_U20 : component myproject_mul_8s_11ns_17_2_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read1_int_reg,
        din1 => grp_fu_56_p1,
        ce => grp_fu_56_ce,
        dout => grp_fu_56_p2);

    mul_8s_11ns_17_2_0_U21 : component myproject_mul_8s_11ns_17_2_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read_int_reg,
        din1 => grp_fu_57_p1,
        ce => grp_fu_57_ce,
        dout => grp_fu_57_p2);

    mul_8s_11s_17_2_0_U22 : component myproject_mul_8s_11s_17_2_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read2_int_reg,
        din1 => grp_fu_58_p1,
        ce => grp_fu_58_ce,
        dout => grp_fu_58_p2);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_0_int_reg <= add_ln813_15_fu_166_p2;
                ap_return_1_int_reg <= add_ln813_fu_162_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                p_read1_int_reg <= p_read1;
                p_read2_int_reg <= p_read2;
                p_read_int_reg <= p_read;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                trunc_ln818_4_reg_208 <= grp_fu_58_p2(16 downto 9);
                trunc_ln818_s_reg_203 <= grp_fu_56_p2(16 downto 9);
                trunc_ln_reg_198 <= grp_fu_57_p2(16 downto 9);
            end if;
        end if;
    end process;
    add_ln813_15_fu_166_p2 <= std_logic_vector(unsigned(trunc_ln818_4_reg_208) + unsigned(ap_const_lv8_FF));
    add_ln813_fu_162_p2 <= std_logic_vector(unsigned(trunc_ln818_s_reg_203) + unsigned(trunc_ln_reg_198));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_0_assign_proc : process(add_ln813_15_fu_166_p2, ap_ce_reg, ap_return_0_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_0 <= ap_return_0_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_0 <= add_ln813_15_fu_166_p2;
        else 
            ap_return_0 <= "XXXXXXXX";
        end if; 
    end process;


    ap_return_1_assign_proc : process(add_ln813_fu_162_p2, ap_ce_reg, ap_return_1_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_1 <= ap_return_1_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_1 <= add_ln813_fu_162_p2;
        else 
            ap_return_1 <= "XXXXXXXX";
        end if; 
    end process;


    grp_fu_56_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_56_ce <= ap_const_logic_1;
        else 
            grp_fu_56_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_56_p1 <= ap_const_lv17_27F(11 - 1 downto 0);

    grp_fu_57_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_57_ce <= ap_const_logic_1;
        else 
            grp_fu_57_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_57_p1 <= ap_const_lv17_26F(11 - 1 downto 0);

    grp_fu_58_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_58_ce <= ap_const_logic_1;
        else 
            grp_fu_58_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_58_p1 <= ap_const_lv17_1FD47(11 - 1 downto 0);
end behav;
