// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_dense_latency_ap_fixed_8_4_5_3_0_ap_fixed_8_4_5_3_0_config11_s (
        ap_clk,
        ap_rst,
        p_read,
        p_read1,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [7:0] p_read;
input  [7:0] p_read1;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
input   ap_ce;

reg[7:0] ap_return_0;
reg[7:0] ap_return_1;
reg[7:0] ap_return_2;

reg   [7:0] p_read_12_reg_220;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [6:0] trunc_ln1273_fu_64_p1;
reg   [6:0] trunc_ln1273_reg_225;
reg   [7:0] trunc_ln818_7_reg_230;
wire   [7:0] add_ln813_18_fu_130_p2;
reg   [7:0] add_ln813_18_reg_235;
wire    ap_block_pp0_stage0;
wire  signed [7:0] sext_ln1273_8_fu_68_p0;
wire  signed [7:0] shl_ln1273_5_fu_72_p1;
wire  signed [7:0] shl_ln1273_6_fu_80_p1;
wire   [8:0] shl_ln1273_6_fu_80_p3;
wire   [10:0] shl_ln1273_5_fu_72_p3;
wire  signed [10:0] sext_ln1273_9_fu_88_p1;
wire   [10:0] r_V_13_fu_92_p2;
wire   [10:0] sub_ln1273_fu_108_p2;
wire  signed [10:0] sext_ln1273_8_fu_68_p1;
wire   [10:0] r_V_14_fu_114_p2;
wire   [7:0] trunc_ln818_6_fu_98_p4;
wire   [9:0] shl_ln1273_s_fu_143_p3;
wire   [10:0] shl_ln_fu_136_p3;
wire  signed [10:0] sext_ln1273_fu_150_p1;
wire   [10:0] r_V_fu_154_p2;
wire   [10:0] r_V_12_fu_170_p2;
wire   [7:0] trunc_ln818_s_fu_176_p4;
wire   [7:0] trunc_ln_fu_160_p4;
wire   [7:0] add_ln813_19_fu_192_p2;
wire   [7:0] add_ln813_fu_186_p2;
wire   [7:0] add_ln813_20_fu_197_p2;
reg    ap_ce_reg;
reg   [7:0] ap_return_0_int_reg;
reg   [7:0] ap_return_1_int_reg;
reg   [7:0] ap_return_2_int_reg;

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        add_ln813_18_reg_235 <= add_ln813_18_fu_130_p2;
        p_read_12_reg_220 <= p_read;
        trunc_ln1273_reg_225 <= trunc_ln1273_fu_64_p1;
        trunc_ln818_7_reg_230 <= {{r_V_14_fu_114_p2[10:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_0_int_reg <= add_ln813_19_fu_192_p2;
        ap_return_1_int_reg[7 : 1] <= add_ln813_fu_186_p2[7 : 1];
        ap_return_2_int_reg <= add_ln813_20_fu_197_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_0 = ap_return_0_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_0 = add_ln813_19_fu_192_p2;
    end else begin
        ap_return_0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_1 = ap_return_1_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_1 = add_ln813_fu_186_p2;
    end else begin
        ap_return_1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_2 = ap_return_2_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_2 = add_ln813_20_fu_197_p2;
    end else begin
        ap_return_2 = 'bx;
    end
end

assign add_ln813_18_fu_130_p2 = ($signed(trunc_ln818_6_fu_98_p4) + $signed(8'd250));

assign add_ln813_19_fu_192_p2 = (add_ln813_18_reg_235 + trunc_ln_fu_160_p4);

assign add_ln813_20_fu_197_p2 = (trunc_ln818_7_reg_230 + 8'd2);

assign add_ln813_fu_186_p2 = (trunc_ln818_s_fu_176_p4 + 8'd4);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign r_V_12_fu_170_p2 = (11'd0 - shl_ln_fu_136_p3);

assign r_V_13_fu_92_p2 = ($signed(shl_ln1273_5_fu_72_p3) + $signed(sext_ln1273_9_fu_88_p1));

assign r_V_14_fu_114_p2 = ($signed(sub_ln1273_fu_108_p2) - $signed(sext_ln1273_8_fu_68_p1));

assign r_V_fu_154_p2 = ($signed(shl_ln_fu_136_p3) - $signed(sext_ln1273_fu_150_p1));

assign sext_ln1273_8_fu_68_p0 = p_read1;

assign sext_ln1273_8_fu_68_p1 = sext_ln1273_8_fu_68_p0;

assign sext_ln1273_9_fu_88_p1 = $signed(shl_ln1273_6_fu_80_p3);

assign sext_ln1273_fu_150_p1 = $signed(shl_ln1273_s_fu_143_p3);

assign shl_ln1273_5_fu_72_p1 = p_read1;

assign shl_ln1273_5_fu_72_p3 = {{shl_ln1273_5_fu_72_p1}, {3'd0}};

assign shl_ln1273_6_fu_80_p1 = p_read1;

assign shl_ln1273_6_fu_80_p3 = {{shl_ln1273_6_fu_80_p1}, {1'd0}};

assign shl_ln1273_s_fu_143_p3 = {{p_read_12_reg_220}, {2'd0}};

assign shl_ln_fu_136_p3 = {{trunc_ln1273_reg_225}, {4'd0}};

assign sub_ln1273_fu_108_p2 = (11'd0 - shl_ln1273_5_fu_72_p3);

assign trunc_ln1273_fu_64_p1 = p_read[6:0];

assign trunc_ln818_6_fu_98_p4 = {{r_V_13_fu_92_p2[10:3]}};

assign trunc_ln818_s_fu_176_p4 = {{r_V_12_fu_170_p2[10:3]}};

assign trunc_ln_fu_160_p4 = {{r_V_fu_154_p2[10:3]}};

always @ (posedge ap_clk) begin
    ap_return_1_int_reg[0] <= 1'b0;
end

endmodule //myproject_dense_latency_ap_fixed_8_4_5_3_0_ap_fixed_8_4_5_3_0_config11_s
